# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:18:21+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class ALPNPolicyNotSupportedException(RootModel[Any]):
    root: Any


class ActionOrder(RootModel[conint(ge=1, le=50000)]):
    root: conint(ge=1, le=50000)


class ActionTypeEnum(Enum):
    forward = 'forward'
    authenticate_oidc = 'authenticate-oidc'
    authenticate_cognito = 'authenticate-cognito'
    redirect = 'redirect'
    fixed_response = 'fixed-response'


class AddTagsOutput(BaseModel):
    pass


class AllocationId(RootModel[str]):
    root: str


class AllocationIdNotFoundException(RootModel[Any]):
    root: Any


class AlpnPolicyValue(RootModel[str]):
    root: str


class AuthenticateCognitoActionAuthenticationRequestParamName(RootModel[str]):
    root: str


class AuthenticateCognitoActionAuthenticationRequestParamValue(RootModel[str]):
    root: str


class AuthenticateCognitoActionConditionalBehaviorEnum(Enum):
    deny = 'deny'
    allow = 'allow'
    authenticate = 'authenticate'


class AuthenticateCognitoActionScope(RootModel[str]):
    root: str


class AuthenticateCognitoActionSessionCookieName(RootModel[str]):
    root: str


class AuthenticateCognitoActionSessionTimeout(RootModel[int]):
    root: int


class AuthenticateCognitoActionUserPoolArn(RootModel[str]):
    root: str


class AuthenticateCognitoActionUserPoolClientId(RootModel[str]):
    root: str


class AuthenticateCognitoActionUserPoolDomain(RootModel[str]):
    root: str


class AuthenticateOidcActionAuthenticationRequestParamName(RootModel[str]):
    root: str


class AuthenticateOidcActionAuthenticationRequestParamValue(RootModel[str]):
    root: str


class AuthenticateOidcActionAuthorizationEndpoint(RootModel[str]):
    root: str


class AuthenticateOidcActionClientId(RootModel[str]):
    root: str


class AuthenticateOidcActionClientSecret(RootModel[str]):
    root: str


class AuthenticateOidcActionConditionalBehaviorEnum(Enum):
    deny = 'deny'
    allow = 'allow'
    authenticate = 'authenticate'


class AuthenticateOidcActionIssuer(RootModel[str]):
    root: str


class AuthenticateOidcActionScope(RootModel[str]):
    root: str


class AuthenticateOidcActionSessionCookieName(RootModel[str]):
    root: str


class AuthenticateOidcActionSessionTimeout(RootModel[int]):
    root: int


class AuthenticateOidcActionTokenEndpoint(RootModel[str]):
    root: str


class AuthenticateOidcActionUseExistingClientSecret(RootModel[bool]):
    root: bool


class AuthenticateOidcActionUserInfoEndpoint(RootModel[str]):
    root: str


class AvailabilityZoneNotSupportedException(RootModel[Any]):
    root: Any


class CanonicalHostedZoneId(RootModel[str]):
    root: str


class CertificateArn(RootModel[str]):
    root: str


class CertificateNotFoundException(RootModel[Any]):
    root: Any


class CipherName(RootModel[str]):
    root: str


class CipherPriority(RootModel[int]):
    root: int


class ConditionFieldName(RootModel[constr(max_length=64)]):
    root: constr(max_length=64)


class CreatedTime(RootModel[datetime]):
    root: datetime


class CustomerOwnedIpv4Pool(
    RootModel[constr(pattern=r'^(ipv4pool-coip-)[a-zA-Z0-9]+$', max_length=256)]
):
    root: constr(pattern=r'^(ipv4pool-coip-)[a-zA-Z0-9]+$', max_length=256)


class DNSName(RootModel[str]):
    root: str


class Default(RootModel[bool]):
    root: bool


class DeleteListenerOutput(BaseModel):
    pass


class DeleteLoadBalancerOutput(BaseModel):
    pass


class DeleteRuleOutput(BaseModel):
    pass


class DeleteTargetGroupOutput(BaseModel):
    pass


class DeregisterTargetsOutput(BaseModel):
    pass


class Description(RootModel[str]):
    root: str


class DuplicateListenerException(RootModel[Any]):
    root: Any


class DuplicateLoadBalancerNameException(RootModel[Any]):
    root: Any


class DuplicateTagKeysException(RootModel[Any]):
    root: Any


class DuplicateTargetGroupNameException(RootModel[Any]):
    root: Any


class FixedResponseActionContentType(RootModel[constr(min_length=0, max_length=32)]):
    root: constr(min_length=0, max_length=32)


class FixedResponseActionMessage(RootModel[constr(min_length=0, max_length=1024)]):
    root: constr(min_length=0, max_length=1024)


class FixedResponseActionStatusCode(RootModel[constr(pattern=r'^(2|4|5)\d\d$')]):
    root: constr(pattern=r'^(2|4|5)\d\d$')


class GrpcCode(RootModel[str]):
    root: str


class HealthCheckEnabled(RootModel[bool]):
    root: bool


class HealthCheckIntervalSeconds(RootModel[conint(ge=5, le=300)]):
    root: conint(ge=5, le=300)


class HealthCheckPort(RootModel[str]):
    root: str


class HealthCheckThresholdCount(RootModel[conint(ge=2, le=10)]):
    root: conint(ge=2, le=10)


class HealthCheckTimeoutSeconds(RootModel[conint(ge=2, le=120)]):
    root: conint(ge=2, le=120)


class HealthUnavailableException(RootModel[Any]):
    root: Any


class HttpCode(RootModel[str]):
    root: str


class HttpHeaderConditionName(RootModel[str]):
    root: str


class IPv6Address(RootModel[str]):
    root: str


class IncompatibleProtocolsException(RootModel[Any]):
    root: Any


class InvalidConfigurationRequestException(RootModel[Any]):
    root: Any


class InvalidLoadBalancerActionException(RootModel[Any]):
    root: Any


class InvalidSchemeException(RootModel[Any]):
    root: Any


class InvalidSecurityGroupException(RootModel[Any]):
    root: Any


class InvalidSubnetException(RootModel[Any]):
    root: Any


class InvalidTargetException(RootModel[Any]):
    root: Any


class IpAddress(RootModel[str]):
    root: str


class IpAddressType(Enum):
    ipv4 = 'ipv4'
    dualstack = 'dualstack'


class IsDefault(RootModel[bool]):
    root: bool


class ListenerArn(RootModel[str]):
    root: str


class ListenerArns(RootModel[List[ListenerArn]]):
    root: List[ListenerArn]


class ListenerNotFoundException(RootModel[Any]):
    root: Any


class LoadBalancerArn(RootModel[str]):
    root: str


class LoadBalancerArns(RootModel[List[LoadBalancerArn]]):
    root: List[LoadBalancerArn]


class LoadBalancerAttributeKey(
    RootModel[constr(pattern=r'^[a-zA-Z0-9._]+$', max_length=256)]
):
    root: constr(pattern=r'^[a-zA-Z0-9._]+$', max_length=256)


class LoadBalancerAttributeValue(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class LoadBalancerName(RootModel[str]):
    root: str


class LoadBalancerNames(RootModel[List[LoadBalancerName]]):
    root: List[LoadBalancerName]


class LoadBalancerNotFoundException(RootModel[Any]):
    root: Any


class LoadBalancerSchemeEnum(Enum):
    internet_facing = 'internet-facing'
    internal = 'internal'


class LoadBalancerStateEnum(Enum):
    active = 'active'
    provisioning = 'provisioning'
    active_impaired = 'active_impaired'
    failed = 'failed'


class LoadBalancerTypeEnum(Enum):
    application = 'application'
    network = 'network'
    gateway = 'gateway'


class Marker(RootModel[str]):
    root: str


class Matcher(BaseModel):
    GrpcCode_1: Optional[GrpcCode] = Field(None, alias='GrpcCode')
    HttpCode_1: Optional[HttpCode] = Field(None, alias='HttpCode')


class Max(RootModel[str]):
    root: str


class Name(RootModel[str]):
    root: str


class OperationNotPermittedException(RootModel[Any]):
    root: Any


class OutpostId(RootModel[str]):
    root: str


class PageSize(RootModel[conint(ge=1, le=400)]):
    root: conint(ge=1, le=400)


class Path(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class Port(RootModel[conint(ge=1, le=65535)]):
    root: conint(ge=1, le=65535)


class PriorityInUseException(RootModel[Any]):
    root: Any


class PrivateIPv4Address(RootModel[str]):
    root: str


class ProtocolEnum(Enum):
    HTTP = 'HTTP'
    HTTPS = 'HTTPS'
    TCP = 'TCP'
    TLS = 'TLS'
    UDP = 'UDP'
    TCP_UDP = 'TCP_UDP'
    GENEVE = 'GENEVE'


class ProtocolVersion(RootModel[str]):
    root: str


class RedirectActionHost(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class RedirectActionPath(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class RedirectActionPort(RootModel[str]):
    root: str


class RedirectActionProtocol(RootModel[constr(pattern=r'^(HTTPS?|#\{protocol\})$')]):
    root: constr(pattern=r'^(HTTPS?|#\{protocol\})$')


class RedirectActionQuery(RootModel[constr(min_length=0, max_length=128)]):
    root: constr(min_length=0, max_length=128)


class RedirectActionStatusCodeEnum(Enum):
    HTTP_301 = 'HTTP_301'
    HTTP_302 = 'HTTP_302'


class RegisterTargetsOutput(BaseModel):
    pass


class RemoveListenerCertificatesOutput(BaseModel):
    pass


class RemoveTagsOutput(BaseModel):
    pass


class ResourceArn(RootModel[str]):
    root: str


class ResourceArns(RootModel[List[ResourceArn]]):
    root: List[ResourceArn]


class ResourceInUseException(RootModel[Any]):
    root: Any


class RuleArn(RootModel[str]):
    root: str


class RuleArns(RootModel[List[RuleArn]]):
    root: List[RuleArn]


class RuleNotFoundException(RootModel[Any]):
    root: Any


class RulePriority(RootModel[conint(ge=1, le=50000)]):
    root: conint(ge=1, le=50000)


class RulePriorityPair(BaseModel):
    Priority: Optional[RulePriority] = None
    RuleArn_1: Optional[RuleArn] = Field(None, alias='RuleArn')


class SSLPolicyNotFoundException(RootModel[Any]):
    root: Any


class SecurityGroupId(RootModel[str]):
    root: str


class SecurityGroups(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId]


class SetIpAddressTypeInput(BaseModel):
    IpAddressType_1: IpAddressType = Field(..., alias='IpAddressType')
    LoadBalancerArn_1: LoadBalancerArn = Field(..., alias='LoadBalancerArn')


class SetIpAddressTypeOutput(BaseModel):
    IpAddressType_1: Optional[IpAddressType] = Field(None, alias='IpAddressType')


class SetSecurityGroupsInput(BaseModel):
    LoadBalancerArn_1: LoadBalancerArn = Field(..., alias='LoadBalancerArn')
    SecurityGroups_1: SecurityGroups = Field(..., alias='SecurityGroups')


class SetSecurityGroupsOutput(BaseModel):
    SecurityGroupIds: Optional[SecurityGroups] = None


class SslPolicyName(RootModel[str]):
    root: str


class SslPolicyNames(RootModel[List[SslPolicyName]]):
    root: List[SslPolicyName]


class SslProtocol(RootModel[str]):
    root: str


class SslProtocols(RootModel[List[SslProtocol]]):
    root: List[SslProtocol]


class StateReason(RootModel[str]):
    root: str


class String(RootModel[str]):
    root: str


class StringValue(RootModel[str]):
    root: str


class SubnetId(RootModel[str]):
    root: str


class SubnetMapping(BaseModel):
    AllocationId_1: Optional[AllocationId] = Field(None, alias='AllocationId')
    IPv6Address_1: Optional[IPv6Address] = Field(None, alias='IPv6Address')
    PrivateIPv4Address_1: Optional[PrivateIPv4Address] = Field(
        None, alias='PrivateIPv4Address'
    )
    SubnetId_1: Optional[SubnetId] = Field(None, alias='SubnetId')


class SubnetMappings(RootModel[List[SubnetMapping]]):
    root: List[SubnetMapping]


class SubnetNotFoundException(RootModel[Any]):
    root: Any


class Subnets(RootModel[List[SubnetId]]):
    root: List[SubnetId]


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256
    )


class TargetGroupArn(RootModel[str]):
    root: str


class TargetGroupArns(RootModel[List[TargetGroupArn]]):
    root: List[TargetGroupArn]


class TargetGroupAssociationLimitException(RootModel[Any]):
    root: Any


class TargetGroupAttributeKey(
    RootModel[constr(pattern=r'^[a-zA-Z0-9._]+$', max_length=256)]
):
    root: constr(pattern=r'^[a-zA-Z0-9._]+$', max_length=256)


class TargetGroupAttributeValue(RootModel[str]):
    root: str


class TargetGroupIpAddressTypeEnum(Enum):
    ipv4 = 'ipv4'
    ipv6 = 'ipv6'


class TargetGroupName(RootModel[str]):
    root: str


class TargetGroupNames(RootModel[List[TargetGroupName]]):
    root: List[TargetGroupName]


class TargetGroupNotFoundException(RootModel[Any]):
    root: Any


class TargetGroupStickinessDurationSeconds(RootModel[int]):
    root: int


class TargetGroupStickinessEnabled(RootModel[bool]):
    root: bool


class TargetGroupWeight(RootModel[int]):
    root: int


class TargetHealthReasonEnum(Enum):
    Elb_RegistrationInProgress = 'Elb.RegistrationInProgress'
    Elb_InitialHealthChecking = 'Elb.InitialHealthChecking'
    Target_ResponseCodeMismatch = 'Target.ResponseCodeMismatch'
    Target_Timeout = 'Target.Timeout'
    Target_FailedHealthChecks = 'Target.FailedHealthChecks'
    Target_NotRegistered = 'Target.NotRegistered'
    Target_NotInUse = 'Target.NotInUse'
    Target_DeregistrationInProgress = 'Target.DeregistrationInProgress'
    Target_InvalidState = 'Target.InvalidState'
    Target_IpUnusable = 'Target.IpUnusable'
    Target_HealthCheckDisabled = 'Target.HealthCheckDisabled'
    Elb_InternalError = 'Elb.InternalError'


class TargetHealthStateEnum(Enum):
    initial = 'initial'
    healthy = 'healthy'
    unhealthy = 'unhealthy'
    unused = 'unused'
    draining = 'draining'
    unavailable = 'unavailable'


class TargetId(RootModel[str]):
    root: str


class TargetTypeEnum(Enum):
    instance = 'instance'
    ip = 'ip'
    lambda_ = 'lambda'
    alb = 'alb'


class TooManyActionsException(RootModel[Any]):
    root: Any


class TooManyCertificatesException(RootModel[Any]):
    root: Any


class TooManyListenersException(RootModel[Any]):
    root: Any


class TooManyLoadBalancersException(RootModel[Any]):
    root: Any


class TooManyRegistrationsForTargetIdException(RootModel[Any]):
    root: Any


class TooManyRulesException(RootModel[Any]):
    root: Any


class TooManyTagsException(RootModel[Any]):
    root: Any


class TooManyTargetGroupsException(RootModel[Any]):
    root: Any


class TooManyTargetsException(RootModel[Any]):
    root: Any


class TooManyUniqueTargetGroupsPerLoadBalancerException(RootModel[Any]):
    root: Any


class UnsupportedProtocolException(RootModel[Any]):
    root: Any


class VpcId(RootModel[str]):
    root: str


class ZoneName(RootModel[str]):
    root: str


class Action1(Enum):
    AddListenerCertificates = 'AddListenerCertificates'


class Version(Enum):
    field_2015_12_01 = '2015-12-01'


class Action5(Enum):
    AddTags = 'AddTags'


class Protocol(Enum):
    HTTP = 'HTTP'
    HTTPS = 'HTTPS'
    TCP = 'TCP'
    TLS = 'TLS'
    UDP = 'UDP'
    TCP_UDP = 'TCP_UDP'
    GENEVE = 'GENEVE'


class Action9(Enum):
    CreateListener = 'CreateListener'


class AlpnPolicy(RootModel[List[AlpnPolicyValue]]):
    root: List[AlpnPolicyValue]


class Scheme(Enum):
    internet_facing = 'internet-facing'
    internal = 'internal'


class Type(Enum):
    application = 'application'
    network = 'network'
    gateway = 'gateway'


class Action13(Enum):
    CreateLoadBalancer = 'CreateLoadBalancer'


class Action17(Enum):
    CreateRule = 'CreateRule'


class HealthCheckProtocol(Enum):
    HTTP = 'HTTP'
    HTTPS = 'HTTPS'
    TCP = 'TCP'
    TLS = 'TLS'
    UDP = 'UDP'
    TCP_UDP = 'TCP_UDP'
    GENEVE = 'GENEVE'


class TargetType(Enum):
    instance = 'instance'
    ip = 'ip'
    lambda_ = 'lambda'
    alb = 'alb'


class IpAddressType3(Enum):
    ipv4 = 'ipv4'
    ipv6 = 'ipv6'


class Action21(Enum):
    CreateTargetGroup = 'CreateTargetGroup'


class Action25(Enum):
    DeleteListener = 'DeleteListener'


class Action29(Enum):
    DeleteLoadBalancer = 'DeleteLoadBalancer'


class Action33(Enum):
    DeleteRule = 'DeleteRule'


class Action37(Enum):
    DeleteTargetGroup = 'DeleteTargetGroup'


class Action41(Enum):
    DeregisterTargets = 'DeregisterTargets'


class Action45(Enum):
    DescribeAccountLimits = 'DescribeAccountLimits'


class Action49(Enum):
    DescribeListenerCertificates = 'DescribeListenerCertificates'


class Action53(Enum):
    DescribeListeners = 'DescribeListeners'


class Action57(Enum):
    DescribeLoadBalancerAttributes = 'DescribeLoadBalancerAttributes'


class Action61(Enum):
    DescribeLoadBalancers = 'DescribeLoadBalancers'


class Names(RootModel[List[LoadBalancerName]]):
    root: List[LoadBalancerName]


class Action65(Enum):
    DescribeRules = 'DescribeRules'


class LoadBalancerType(Enum):
    application = 'application'
    network = 'network'
    gateway = 'gateway'


class Action69(Enum):
    DescribeSSLPolicies = 'DescribeSSLPolicies'


class Names1(RootModel[List[SslPolicyName]]):
    root: List[SslPolicyName]


class Action73(Enum):
    DescribeTags = 'DescribeTags'


class Action77(Enum):
    DescribeTargetGroupAttributes = 'DescribeTargetGroupAttributes'


class Action81(Enum):
    DescribeTargetGroups = 'DescribeTargetGroups'


class Names2(RootModel[List[TargetGroupName]]):
    root: List[TargetGroupName]


class Action85(Enum):
    DescribeTargetHealth = 'DescribeTargetHealth'


class Action89(Enum):
    ModifyListener = 'ModifyListener'


class Action93(Enum):
    ModifyLoadBalancerAttributes = 'ModifyLoadBalancerAttributes'


class Action97(Enum):
    ModifyRule = 'ModifyRule'


class Action101(Enum):
    ModifyTargetGroup = 'ModifyTargetGroup'


class Action105(Enum):
    ModifyTargetGroupAttributes = 'ModifyTargetGroupAttributes'


class Action109(Enum):
    RegisterTargets = 'RegisterTargets'


class Action113(Enum):
    RemoveListenerCertificates = 'RemoveListenerCertificates'


class Action117(Enum):
    RemoveTags = 'RemoveTags'


class IpAddressType5(Enum):
    ipv4 = 'ipv4'
    dualstack = 'dualstack'


class Action121(Enum):
    SetIpAddressType = 'SetIpAddressType'


class Action125(Enum):
    SetRulePriorities = 'SetRulePriorities'


class RulePriorities(RootModel[List[RulePriorityPair]]):
    root: List[RulePriorityPair]


class Action129(Enum):
    SetSecurityGroups = 'SetSecurityGroups'


class Action133(Enum):
    SetSubnets = 'SetSubnets'


class AlpnPolicyName(RootModel[List[AlpnPolicyValue]]):
    root: List[AlpnPolicyValue]


class AuthenticateCognitoActionAuthenticationRequestExtraParams(
    RootModel[
        Optional[Dict[str, AuthenticateCognitoActionAuthenticationRequestParamValue]]
    ]
):
    root: Optional[
        Dict[str, AuthenticateCognitoActionAuthenticationRequestParamValue]
    ] = None


class AuthenticateCognitoActionConfig(BaseModel):
    AuthenticationRequestExtraParams: Optional[
        AuthenticateCognitoActionAuthenticationRequestExtraParams
    ] = None
    OnUnauthenticatedRequest: Optional[
        AuthenticateCognitoActionConditionalBehaviorEnum
    ] = None
    Scope: Optional[AuthenticateCognitoActionScope] = None
    SessionCookieName: Optional[AuthenticateCognitoActionSessionCookieName] = None
    SessionTimeout: Optional[AuthenticateCognitoActionSessionTimeout] = None
    UserPoolArn: AuthenticateCognitoActionUserPoolArn
    UserPoolClientId: AuthenticateCognitoActionUserPoolClientId
    UserPoolDomain: AuthenticateCognitoActionUserPoolDomain


class AuthenticateOidcActionAuthenticationRequestExtraParams(
    RootModel[
        Optional[Dict[str, AuthenticateOidcActionAuthenticationRequestParamValue]]
    ]
):
    root: Optional[Dict[str, AuthenticateOidcActionAuthenticationRequestParamValue]] = (
        None
    )


class AuthenticateOidcActionConfig(BaseModel):
    AuthenticationRequestExtraParams: Optional[
        AuthenticateOidcActionAuthenticationRequestExtraParams
    ] = None
    AuthorizationEndpoint: AuthenticateOidcActionAuthorizationEndpoint
    ClientId: AuthenticateOidcActionClientId
    ClientSecret: Optional[AuthenticateOidcActionClientSecret] = None
    Issuer: AuthenticateOidcActionIssuer
    OnUnauthenticatedRequest: Optional[
        AuthenticateOidcActionConditionalBehaviorEnum
    ] = None
    Scope: Optional[AuthenticateOidcActionScope] = None
    SessionCookieName: Optional[AuthenticateOidcActionSessionCookieName] = None
    SessionTimeout: Optional[AuthenticateOidcActionSessionTimeout] = None
    TokenEndpoint: AuthenticateOidcActionTokenEndpoint
    UseExistingClientSecret: Optional[AuthenticateOidcActionUseExistingClientSecret] = (
        None
    )
    UserInfoEndpoint: AuthenticateOidcActionUserInfoEndpoint


class Certificate(BaseModel):
    CertificateArn_1: Optional[CertificateArn] = Field(None, alias='CertificateArn')
    IsDefault: Optional[Default] = None


class CertificateList(RootModel[List[Certificate]]):
    root: List[Certificate]


class Cipher(BaseModel):
    Name: Optional[CipherName] = None
    Priority: Optional[CipherPriority] = None


class Ciphers(RootModel[List[Cipher]]):
    root: List[Cipher]


class DeleteListenerInput(BaseModel):
    ListenerArn_1: ListenerArn = Field(..., alias='ListenerArn')


class DeleteLoadBalancerInput(BaseModel):
    LoadBalancerArn_1: LoadBalancerArn = Field(..., alias='LoadBalancerArn')


class DeleteRuleInput(BaseModel):
    RuleArn_1: RuleArn = Field(..., alias='RuleArn')


class DeleteTargetGroupInput(BaseModel):
    TargetGroupArn_1: TargetGroupArn = Field(..., alias='TargetGroupArn')


class DescribeAccountLimitsInput(BaseModel):
    Marker_1: Optional[Marker] = Field(None, alias='Marker')
    PageSize_1: Optional[PageSize] = Field(None, alias='PageSize')


class DescribeListenerCertificatesInput(BaseModel):
    ListenerArn_1: ListenerArn = Field(..., alias='ListenerArn')
    Marker_1: Optional[Marker] = Field(None, alias='Marker')
    PageSize_1: Optional[PageSize] = Field(None, alias='PageSize')


class DescribeListenerCertificatesOutput(BaseModel):
    Certificates: Optional[CertificateList] = None
    NextMarker: Optional[Marker] = None


class DescribeListenersInput(BaseModel):
    ListenerArns_1: Optional[ListenerArns] = Field(None, alias='ListenerArns')
    LoadBalancerArn_1: Optional[LoadBalancerArn] = Field(None, alias='LoadBalancerArn')
    Marker_1: Optional[Marker] = Field(None, alias='Marker')
    PageSize_1: Optional[PageSize] = Field(None, alias='PageSize')


class DescribeLoadBalancerAttributesInput(BaseModel):
    LoadBalancerArn_1: LoadBalancerArn = Field(..., alias='LoadBalancerArn')


class DescribeLoadBalancersInput(BaseModel):
    LoadBalancerArns_1: Optional[LoadBalancerArns] = Field(
        None, alias='LoadBalancerArns'
    )
    Marker_1: Optional[Marker] = Field(None, alias='Marker')
    Names: Optional[LoadBalancerNames] = None
    PageSize_1: Optional[PageSize] = Field(None, alias='PageSize')


class DescribeRulesInput(BaseModel):
    ListenerArn_1: Optional[ListenerArn] = Field(None, alias='ListenerArn')
    Marker_1: Optional[Marker] = Field(None, alias='Marker')
    PageSize_1: Optional[PageSize] = Field(None, alias='PageSize')
    RuleArns_1: Optional[RuleArns] = Field(None, alias='RuleArns')


class DescribeSSLPoliciesInput(BaseModel):
    LoadBalancerType: Optional[LoadBalancerTypeEnum] = None
    Marker_1: Optional[Marker] = Field(None, alias='Marker')
    Names: Optional[SslPolicyNames] = None
    PageSize_1: Optional[PageSize] = Field(None, alias='PageSize')


class DescribeTagsInput(BaseModel):
    ResourceArns_1: ResourceArns = Field(..., alias='ResourceArns')


class DescribeTargetGroupAttributesInput(BaseModel):
    TargetGroupArn_1: TargetGroupArn = Field(..., alias='TargetGroupArn')


class DescribeTargetGroupsInput(BaseModel):
    LoadBalancerArn_1: Optional[LoadBalancerArn] = Field(None, alias='LoadBalancerArn')
    Marker_1: Optional[Marker] = Field(None, alias='Marker')
    Names: Optional[TargetGroupNames] = None
    PageSize_1: Optional[PageSize] = Field(None, alias='PageSize')
    TargetGroupArns_1: Optional[TargetGroupArns] = Field(None, alias='TargetGroupArns')


class FixedResponseActionConfig(BaseModel):
    ContentType: Optional[FixedResponseActionContentType] = None
    MessageBody: Optional[FixedResponseActionMessage] = None
    StatusCode: FixedResponseActionStatusCode


class Limit(BaseModel):
    Max_1: Optional[Max] = Field(None, alias='Max')
    Name_1: Optional[Name] = Field(None, alias='Name')


class Limits(RootModel[List[Limit]]):
    root: List[Limit]


class ListOfString(RootModel[List[StringValue]]):
    root: List[StringValue]


class LoadBalancerAddress(BaseModel):
    AllocationId_1: Optional[AllocationId] = Field(None, alias='AllocationId')
    IPv6Address_1: Optional[IPv6Address] = Field(None, alias='IPv6Address')
    IpAddress_1: Optional[IpAddress] = Field(None, alias='IpAddress')
    PrivateIPv4Address_1: Optional[PrivateIPv4Address] = Field(
        None, alias='PrivateIPv4Address'
    )


class LoadBalancerAddresses(RootModel[List[LoadBalancerAddress]]):
    root: List[LoadBalancerAddress]


class LoadBalancerAttribute(BaseModel):
    Key: Optional[LoadBalancerAttributeKey] = None
    Value: Optional[LoadBalancerAttributeValue] = None


class LoadBalancerAttributes(RootModel[List[LoadBalancerAttribute]]):
    root: List[LoadBalancerAttribute] = Field(..., max_length=20)


class LoadBalancerState(BaseModel):
    Code: Optional[LoadBalancerStateEnum] = None
    Reason: Optional[StateReason] = None


class ModifyLoadBalancerAttributesInput(BaseModel):
    Attributes: LoadBalancerAttributes
    LoadBalancerArn_1: LoadBalancerArn = Field(..., alias='LoadBalancerArn')


class ModifyLoadBalancerAttributesOutput(BaseModel):
    Attributes: Optional[LoadBalancerAttributes] = None


class ModifyTargetGroupInput(BaseModel):
    HealthCheckEnabled_1: Optional[HealthCheckEnabled] = Field(
        None, alias='HealthCheckEnabled'
    )
    HealthCheckIntervalSeconds_1: Optional[HealthCheckIntervalSeconds] = Field(
        None, alias='HealthCheckIntervalSeconds'
    )
    HealthCheckPath: Optional[Path] = None
    HealthCheckPort_1: Optional[HealthCheckPort] = Field(None, alias='HealthCheckPort')
    HealthCheckProtocol: Optional[ProtocolEnum] = None
    HealthCheckTimeoutSeconds_1: Optional[HealthCheckTimeoutSeconds] = Field(
        None, alias='HealthCheckTimeoutSeconds'
    )
    HealthyThresholdCount: Optional[HealthCheckThresholdCount] = None
    Matcher_1: Optional[Matcher] = Field(None, alias='Matcher')
    TargetGroupArn_1: TargetGroupArn = Field(..., alias='TargetGroupArn')
    UnhealthyThresholdCount: Optional[HealthCheckThresholdCount] = None


class PathPatternConditionConfig(BaseModel):
    Values: Optional[ListOfString] = None


class QueryStringKeyValuePair(BaseModel):
    Key: Optional[StringValue] = None
    Value: Optional[StringValue] = None


class QueryStringKeyValuePairList(RootModel[List[QueryStringKeyValuePair]]):
    root: List[QueryStringKeyValuePair]


class RedirectActionConfig(BaseModel):
    Host: Optional[RedirectActionHost] = None
    Path: Optional[RedirectActionPath] = None
    Port: Optional[RedirectActionPort] = None
    Protocol: Optional[RedirectActionProtocol] = None
    Query: Optional[RedirectActionQuery] = None
    StatusCode: RedirectActionStatusCodeEnum


class RemoveListenerCertificatesInput(BaseModel):
    Certificates: CertificateList
    ListenerArn_1: ListenerArn = Field(..., alias='ListenerArn')


class RemoveTagsInput(BaseModel):
    ResourceArns_1: ResourceArns = Field(..., alias='ResourceArns')
    TagKeys_1: TagKeys = Field(..., alias='TagKeys')


class RulePriorityList(RootModel[List[RulePriorityPair]]):
    root: List[RulePriorityPair]


class SetRulePrioritiesInput(BaseModel):
    RulePriorities: RulePriorityList


class SetSubnetsInput(BaseModel):
    IpAddressType_1: Optional[IpAddressType] = Field(None, alias='IpAddressType')
    LoadBalancerArn_1: LoadBalancerArn = Field(..., alias='LoadBalancerArn')
    SubnetMappings_1: Optional[SubnetMappings] = Field(None, alias='SubnetMappings')
    Subnets_1: Optional[Subnets] = Field(None, alias='Subnets')


class SourceIpConditionConfig(BaseModel):
    Values: Optional[ListOfString] = None


class SslPolicy(BaseModel):
    Ciphers_1: Optional[Ciphers] = Field(None, alias='Ciphers')
    Name: Optional[SslPolicyName] = None
    SslProtocols_1: Optional[SslProtocols] = Field(None, alias='SslProtocols')
    SupportedLoadBalancerTypes: Optional[ListOfString] = None


class Tag(BaseModel):
    Key: TagKey
    Value: Optional[TagValue] = None


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., min_length=1)


class TargetDescription(BaseModel):
    AvailabilityZone: Optional[ZoneName] = None
    Id: TargetId
    Port_1: Optional[Port] = Field(None, alias='Port')


class TargetDescriptions(RootModel[List[TargetDescription]]):
    root: List[TargetDescription]


class TargetGroup(BaseModel):
    HealthCheckEnabled_1: Optional[HealthCheckEnabled] = Field(
        None, alias='HealthCheckEnabled'
    )
    HealthCheckIntervalSeconds_1: Optional[HealthCheckIntervalSeconds] = Field(
        None, alias='HealthCheckIntervalSeconds'
    )
    HealthCheckPath: Optional[Path] = None
    HealthCheckPort_1: Optional[HealthCheckPort] = Field(None, alias='HealthCheckPort')
    HealthCheckProtocol: Optional[ProtocolEnum] = None
    HealthCheckTimeoutSeconds_1: Optional[HealthCheckTimeoutSeconds] = Field(
        None, alias='HealthCheckTimeoutSeconds'
    )
    HealthyThresholdCount: Optional[HealthCheckThresholdCount] = None
    IpAddressType: Optional[TargetGroupIpAddressTypeEnum] = None
    LoadBalancerArns_1: Optional[LoadBalancerArns] = Field(
        None, alias='LoadBalancerArns'
    )
    Matcher_1: Optional[Matcher] = Field(None, alias='Matcher')
    Port_1: Optional[Port] = Field(None, alias='Port')
    Protocol: Optional[ProtocolEnum] = None
    ProtocolVersion_1: Optional[ProtocolVersion] = Field(None, alias='ProtocolVersion')
    TargetGroupArn_1: Optional[TargetGroupArn] = Field(None, alias='TargetGroupArn')
    TargetGroupName_1: Optional[TargetGroupName] = Field(None, alias='TargetGroupName')
    TargetType: Optional[TargetTypeEnum] = None
    UnhealthyThresholdCount: Optional[HealthCheckThresholdCount] = None
    VpcId_1: Optional[VpcId] = Field(None, alias='VpcId')


class TargetGroupAttribute(BaseModel):
    Key: Optional[TargetGroupAttributeKey] = None
    Value: Optional[TargetGroupAttributeValue] = None


class TargetGroupAttributes(RootModel[List[TargetGroupAttribute]]):
    root: List[TargetGroupAttribute]


class TargetGroupStickinessConfig(BaseModel):
    DurationSeconds: Optional[TargetGroupStickinessDurationSeconds] = None
    Enabled: Optional[TargetGroupStickinessEnabled] = None


class TargetGroupTuple(BaseModel):
    TargetGroupArn_1: Optional[TargetGroupArn] = Field(None, alias='TargetGroupArn')
    Weight: Optional[TargetGroupWeight] = None


class TargetGroups(RootModel[List[TargetGroup]]):
    root: List[TargetGroup]


class TargetHealth(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    Reason: Optional[TargetHealthReasonEnum] = None
    State: Optional[TargetHealthStateEnum] = None


class TargetHealthDescription(BaseModel):
    HealthCheckPort_1: Optional[HealthCheckPort] = Field(None, alias='HealthCheckPort')
    Target: Optional[TargetDescription] = None
    TargetHealth_1: Optional[TargetHealth] = Field(None, alias='TargetHealth')


class TargetHealthDescriptions(RootModel[List[TargetHealthDescription]]):
    root: List[TargetHealthDescription]


class Certificates(RootModel[List[Certificate]]):
    root: List[Certificate]


class Tags(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., min_length=1)


class Targets(RootModel[List[TargetDescription]]):
    root: List[TargetDescription]


class Attributes(RootModel[List[LoadBalancerAttribute]]):
    root: List[LoadBalancerAttribute] = Field(..., max_length=20)


class Attributes1(RootModel[List[TargetGroupAttribute]]):
    root: List[TargetGroupAttribute]


class AddListenerCertificatesInput(BaseModel):
    Certificates: CertificateList
    ListenerArn_1: ListenerArn = Field(..., alias='ListenerArn')


class AddListenerCertificatesOutput(BaseModel):
    Certificates: Optional[CertificateList] = None


class AddTagsInput(BaseModel):
    ResourceArns_1: ResourceArns = Field(..., alias='ResourceArns')
    Tags: TagList


class AvailabilityZone(BaseModel):
    LoadBalancerAddresses_1: Optional[LoadBalancerAddresses] = Field(
        None, alias='LoadBalancerAddresses'
    )
    OutpostId_1: Optional[OutpostId] = Field(None, alias='OutpostId')
    SubnetId_1: Optional[SubnetId] = Field(None, alias='SubnetId')
    ZoneName_1: Optional[ZoneName] = Field(None, alias='ZoneName')


class AvailabilityZones(RootModel[List[AvailabilityZone]]):
    root: List[AvailabilityZone]


class CreateLoadBalancerInput(BaseModel):
    CustomerOwnedIpv4Pool_1: Optional[CustomerOwnedIpv4Pool] = Field(
        None, alias='CustomerOwnedIpv4Pool'
    )
    IpAddressType_1: Optional[IpAddressType] = Field(None, alias='IpAddressType')
    Name: LoadBalancerName
    Scheme: Optional[LoadBalancerSchemeEnum] = None
    SecurityGroups_1: Optional[SecurityGroups] = Field(None, alias='SecurityGroups')
    SubnetMappings_1: Optional[SubnetMappings] = Field(None, alias='SubnetMappings')
    Subnets_1: Optional[Subnets] = Field(None, alias='Subnets')
    Tags: Optional[TagList] = None
    Type: Optional[LoadBalancerTypeEnum] = None


class CreateTargetGroupInput(BaseModel):
    HealthCheckEnabled_1: Optional[HealthCheckEnabled] = Field(
        None, alias='HealthCheckEnabled'
    )
    HealthCheckIntervalSeconds_1: Optional[HealthCheckIntervalSeconds] = Field(
        None, alias='HealthCheckIntervalSeconds'
    )
    HealthCheckPath: Optional[Path] = None
    HealthCheckPort_1: Optional[HealthCheckPort] = Field(None, alias='HealthCheckPort')
    HealthCheckProtocol: Optional[ProtocolEnum] = None
    HealthCheckTimeoutSeconds_1: Optional[HealthCheckTimeoutSeconds] = Field(
        None, alias='HealthCheckTimeoutSeconds'
    )
    HealthyThresholdCount: Optional[HealthCheckThresholdCount] = None
    IpAddressType: Optional[TargetGroupIpAddressTypeEnum] = None
    Matcher_1: Optional[Matcher] = Field(None, alias='Matcher')
    Name: TargetGroupName
    Port_1: Optional[Port] = Field(None, alias='Port')
    Protocol: Optional[ProtocolEnum] = None
    ProtocolVersion_1: Optional[ProtocolVersion] = Field(None, alias='ProtocolVersion')
    Tags: Optional[TagList] = None
    TargetType: Optional[TargetTypeEnum] = None
    UnhealthyThresholdCount: Optional[HealthCheckThresholdCount] = None
    VpcId_1: Optional[VpcId] = Field(None, alias='VpcId')


class CreateTargetGroupOutput(BaseModel):
    TargetGroups_1: Optional[TargetGroups] = Field(None, alias='TargetGroups')


class DeregisterTargetsInput(BaseModel):
    TargetGroupArn_1: TargetGroupArn = Field(..., alias='TargetGroupArn')
    Targets: TargetDescriptions


class DescribeAccountLimitsOutput(BaseModel):
    Limits_1: Optional[Limits] = Field(None, alias='Limits')
    NextMarker: Optional[Marker] = None


class DescribeLoadBalancerAttributesOutput(BaseModel):
    Attributes: Optional[LoadBalancerAttributes] = None


class DescribeTargetGroupAttributesOutput(BaseModel):
    Attributes: Optional[TargetGroupAttributes] = None


class DescribeTargetGroupsOutput(BaseModel):
    NextMarker: Optional[Marker] = None
    TargetGroups_1: Optional[TargetGroups] = Field(None, alias='TargetGroups')


class DescribeTargetHealthInput(BaseModel):
    TargetGroupArn_1: TargetGroupArn = Field(..., alias='TargetGroupArn')
    Targets: Optional[TargetDescriptions] = None


class DescribeTargetHealthOutput(BaseModel):
    TargetHealthDescriptions_1: Optional[TargetHealthDescriptions] = Field(
        None, alias='TargetHealthDescriptions'
    )


class HostHeaderConditionConfig(BaseModel):
    Values: Optional[ListOfString] = None


class HttpHeaderConditionConfig(BaseModel):
    HttpHeaderName: Optional[HttpHeaderConditionName] = None
    Values: Optional[ListOfString] = None


class HttpRequestMethodConditionConfig(BaseModel):
    Values: Optional[ListOfString] = None


class LoadBalancer(BaseModel):
    AvailabilityZones_1: Optional[AvailabilityZones] = Field(
        None, alias='AvailabilityZones'
    )
    CanonicalHostedZoneId_1: Optional[CanonicalHostedZoneId] = Field(
        None, alias='CanonicalHostedZoneId'
    )
    CreatedTime_1: Optional[CreatedTime] = Field(None, alias='CreatedTime')
    CustomerOwnedIpv4Pool_1: Optional[CustomerOwnedIpv4Pool] = Field(
        None, alias='CustomerOwnedIpv4Pool'
    )
    DNSName_1: Optional[DNSName] = Field(None, alias='DNSName')
    IpAddressType_1: Optional[IpAddressType] = Field(None, alias='IpAddressType')
    LoadBalancerArn_1: Optional[LoadBalancerArn] = Field(None, alias='LoadBalancerArn')
    LoadBalancerName_1: Optional[LoadBalancerName] = Field(
        None, alias='LoadBalancerName'
    )
    Scheme: Optional[LoadBalancerSchemeEnum] = None
    SecurityGroups_1: Optional[SecurityGroups] = Field(None, alias='SecurityGroups')
    State: Optional[LoadBalancerState] = None
    Type: Optional[LoadBalancerTypeEnum] = None
    VpcId_1: Optional[VpcId] = Field(None, alias='VpcId')


class LoadBalancers(RootModel[List[LoadBalancer]]):
    root: List[LoadBalancer]


class ModifyTargetGroupAttributesInput(BaseModel):
    Attributes: TargetGroupAttributes
    TargetGroupArn_1: TargetGroupArn = Field(..., alias='TargetGroupArn')


class ModifyTargetGroupAttributesOutput(BaseModel):
    Attributes: Optional[TargetGroupAttributes] = None


class ModifyTargetGroupOutput(BaseModel):
    TargetGroups_1: Optional[TargetGroups] = Field(None, alias='TargetGroups')


class QueryStringConditionConfig(BaseModel):
    Values: Optional[QueryStringKeyValuePairList] = None


class RegisterTargetsInput(BaseModel):
    TargetGroupArn_1: TargetGroupArn = Field(..., alias='TargetGroupArn')
    Targets: TargetDescriptions


class RuleCondition(BaseModel):
    Field: Optional[ConditionFieldName] = None
    HostHeaderConfig: Optional[HostHeaderConditionConfig] = None
    HttpHeaderConfig: Optional[HttpHeaderConditionConfig] = None
    HttpRequestMethodConfig: Optional[HttpRequestMethodConditionConfig] = None
    PathPatternConfig: Optional[PathPatternConditionConfig] = None
    QueryStringConfig: Optional[QueryStringConditionConfig] = None
    SourceIpConfig: Optional[SourceIpConditionConfig] = None
    Values: Optional[ListOfString] = None


class RuleConditionList(RootModel[List[RuleCondition]]):
    root: List[RuleCondition]


class SetSubnetsOutput(BaseModel):
    AvailabilityZones_1: Optional[AvailabilityZones] = Field(
        None, alias='AvailabilityZones'
    )
    IpAddressType_1: Optional[IpAddressType] = Field(None, alias='IpAddressType')


class SslPolicies(RootModel[List[SslPolicy]]):
    root: List[SslPolicy]


class TagDescription(BaseModel):
    ResourceArn_1: Optional[ResourceArn] = Field(None, alias='ResourceArn')
    Tags: Optional[TagList] = None


class TagDescriptions(RootModel[List[TagDescription]]):
    root: List[TagDescription]


class TargetGroupList(RootModel[List[TargetGroupTuple]]):
    root: List[TargetGroupTuple]


class Conditions(RootModel[List[RuleCondition]]):
    root: List[RuleCondition]


class CreateLoadBalancerOutput(BaseModel):
    LoadBalancers_1: Optional[LoadBalancers] = Field(None, alias='LoadBalancers')


class DescribeLoadBalancersOutput(BaseModel):
    LoadBalancers_1: Optional[LoadBalancers] = Field(None, alias='LoadBalancers')
    NextMarker: Optional[Marker] = None


class DescribeSSLPoliciesOutput(BaseModel):
    NextMarker: Optional[Marker] = None
    SslPolicies_1: Optional[SslPolicies] = Field(None, alias='SslPolicies')


class DescribeTagsOutput(BaseModel):
    TagDescriptions_1: Optional[TagDescriptions] = Field(None, alias='TagDescriptions')


class ForwardActionConfig(BaseModel):
    TargetGroupStickinessConfig_1: Optional[TargetGroupStickinessConfig] = Field(
        None, alias='TargetGroupStickinessConfig'
    )
    TargetGroups: Optional[TargetGroupList] = None


class Action(BaseModel):
    AuthenticateCognitoConfig: Optional[AuthenticateCognitoActionConfig] = None
    AuthenticateOidcConfig: Optional[AuthenticateOidcActionConfig] = None
    FixedResponseConfig: Optional[FixedResponseActionConfig] = None
    ForwardConfig: Optional[ForwardActionConfig] = None
    Order: Optional[ActionOrder] = None
    RedirectConfig: Optional[RedirectActionConfig] = None
    TargetGroupArn_1: Optional[TargetGroupArn] = Field(None, alias='TargetGroupArn')
    Type: ActionTypeEnum


class Actions(RootModel[List[Action]]):
    root: List[Action]


class CreateListenerInput(BaseModel):
    AlpnPolicy: Optional[AlpnPolicyName] = None
    Certificates: Optional[CertificateList] = None
    DefaultActions: Actions
    LoadBalancerArn_1: LoadBalancerArn = Field(..., alias='LoadBalancerArn')
    Port_1: Optional[Port] = Field(None, alias='Port')
    Protocol: Optional[ProtocolEnum] = None
    SslPolicy: Optional[SslPolicyName] = None
    Tags: Optional[TagList] = None


class CreateRuleInput(BaseModel):
    Actions_1: Actions = Field(..., alias='Actions')
    Conditions: RuleConditionList
    ListenerArn_1: ListenerArn = Field(..., alias='ListenerArn')
    Priority: RulePriority
    Tags: Optional[TagList] = None


class Listener(BaseModel):
    AlpnPolicy: Optional[AlpnPolicyName] = None
    Certificates: Optional[CertificateList] = None
    DefaultActions: Optional[Actions] = None
    ListenerArn_1: Optional[ListenerArn] = Field(None, alias='ListenerArn')
    LoadBalancerArn_1: Optional[LoadBalancerArn] = Field(None, alias='LoadBalancerArn')
    Port_1: Optional[Port] = Field(None, alias='Port')
    Protocol: Optional[ProtocolEnum] = None
    SslPolicy: Optional[SslPolicyName] = None


class Listeners(RootModel[List[Listener]]):
    root: List[Listener]


class ModifyListenerInput(BaseModel):
    AlpnPolicy: Optional[AlpnPolicyName] = None
    Certificates: Optional[CertificateList] = None
    DefaultActions: Optional[Actions] = None
    ListenerArn_1: ListenerArn = Field(..., alias='ListenerArn')
    Port_1: Optional[Port] = Field(None, alias='Port')
    Protocol: Optional[ProtocolEnum] = None
    SslPolicy: Optional[SslPolicyName] = None


class ModifyListenerOutput(BaseModel):
    Listeners_1: Optional[Listeners] = Field(None, alias='Listeners')


class ModifyRuleInput(BaseModel):
    Actions_1: Optional[Actions] = Field(None, alias='Actions')
    Conditions: Optional[RuleConditionList] = None
    RuleArn_1: RuleArn = Field(..., alias='RuleArn')


class Rule(BaseModel):
    Actions_1: Optional[Actions] = Field(None, alias='Actions')
    Conditions: Optional[RuleConditionList] = None
    IsDefault_1: Optional[IsDefault] = Field(None, alias='IsDefault')
    Priority: Optional[String] = None
    RuleArn_1: Optional[RuleArn] = Field(None, alias='RuleArn')


class Rules(RootModel[List[Rule]]):
    root: List[Rule]


class SetRulePrioritiesOutput(BaseModel):
    Rules_1: Optional[Rules] = Field(None, alias='Rules')


class DefaultActions(RootModel[List[Action]]):
    root: List[Action]


class CreateListenerOutput(BaseModel):
    Listeners_1: Optional[Listeners] = Field(None, alias='Listeners')


class CreateRuleOutput(BaseModel):
    Rules_1: Optional[Rules] = Field(None, alias='Rules')


class DescribeListenersOutput(BaseModel):
    Listeners_1: Optional[Listeners] = Field(None, alias='Listeners')
    NextMarker: Optional[Marker] = None


class DescribeRulesOutput(BaseModel):
    NextMarker: Optional[Marker] = None
    Rules_1: Optional[Rules] = Field(None, alias='Rules')


class ModifyRuleOutput(BaseModel):
    Rules_1: Optional[Rules] = Field(None, alias='Rules')
